apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sc-ingress
  labels:
    name: sc-ingress
  annotations:
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/auth-url: http://auth-service.default.svc.cluster.local:3000/
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set    $auth_cookie $upstream_http_authorization;
      add_header          Set-Cookie $auth_cookie;
      proxy_set_header    Authorization $auth_cookie;

      # Redirect auth errors to custom named locations
      error_page 401 = @ingress_service_custom_error_401;
      error_page 403 = @ingress_service_custom_error_403;
      error_page 500 = @ingress_service_custom_error_500;

      # Grab data from auth error response
      auth_request_set $auth_error $upstream_http_auth_error;
      auth_request_set $auth_error_content_type $upstream_http_content_type;
      auth_request_set $auth_status $upstream_status;

    nginx.ingress.kubernetes.io/server-snippet: |
      location @ingress_service_custom_error_401 {
        internal;

        # Decode auth response header
        # set_decode_base64 $auth_error_decoded $auth_error;

        # Return the error from auth service if any
        if ($auth_error != ""){
          add_header Content-Type $auth_error_content_type always;
          return 401 $auth_error;
        }

        # Fall back to default nginx response
        return 401;
      }

      location @ingress_service_custom_error_403 {
        internal;

        # Decode auth response header
        # set_decode_base64 $auth_error_decoded $auth_error;

        # Return the error from auth service if any
        if ($auth_error != ""){
          add_header Content-Type $auth_error_content_type always;
          return 403 $auth_error;
        }

        # Fall back to default nginx response
        return 403;
      }

      location @ingress_service_custom_error_500 {
        internal;

        # Decode auth response header
        # set_decode_base64 $auth_error_decoded $auth_error;

        # Return the error from auth service if any
        if ($auth_error != ""){
          add_header Content-Type $auth_error_content_type always;
          return 500 $auth_error;
        }

        # Return a hardcoded error in case no auth pods are available
        if ($auth_status = 503){
          add_header Content-Type application/json always;
          return 503 "{\"msg\":\"auth service is unavailable\"}";
        }

        # Fall back to default nginx response
        return 500;
      }
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /feeds(/|$)(.*)
        backend:
          service:
            name: feed-service
            port: 
              number: 3001
      - pathType: Prefix
        path: /users(/|$)(.*)
        backend:
          service:
            name: user-service
            port: 
              number: 3002
      - pathType: Prefix
        path: /docs(/|$)(.*)
        backend:
          service:
            name: docs-service
            port:
              number: 4567
